---

- include_tasks: resources/aws_check_setup.yml

- include_tasks: resources/find_ami_ids.yml

################### Create Resources ###################
- name: Create AWS VPC {{ name_prefix }}-vpc
  ec2_vpc_net:
    name: "{{ name_prefix }}-vpc"
    cidr_block: "{{ ptr_zone_cidr }}"
    region: "{{ ec2_region }}"
    tags:
      Username: "{{ skylight_user }}"
      Info: "Username that provisioned this-> {{ skylight_user }}"
      Skylight: "This was provisioned through the skylight provisioner"
      Students: "{{ user_count }}"
  register: create_vpc
  until: create_vpc is not failed
  retries: 5

- name: Set VPC ID
  set_fact:
    ec2_vpc_id: "{{ create_vpc.vpc.id }}"

- name: Create subnet for {{ name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az }}"
    vpc_id: "{{ ec2_vpc_id }}"
    cidr: "{{ ptr_zone_cidr }}"
    wait_timeout: 600
    resource_tags:
      Name: "{{ name_prefix }}-subnet"
      Username: "{{ skylight_user }}"
      Info: "Username that provisioned this-> {{ skylight_user }}"
      Skylight: "This was provisioned through the skylight provisioner"
      Students: "{{ user_count }}"
  register: create_subnet
  until: create_subnet is not failed
  retries: 15

- name: Set Subnet ID
  set_fact:
    ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"

- name: Create Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ ec2_vpc_id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ name_prefix }}-igw"
      Username: "{{ skylight_user }}"
      Info: "Username that provisioned this-> {{ skylight_user }}"
      Skylight: "This was provisioned through the skylight provisioner"
    state: present
  register: igw
  until: igw is not failed
  retries: 15

- name: vpc public subnet route table is present for {{ ec2_vpc_id }}
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    subnets:
      - "{{ ec2_vpc_subnet_id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    tags:
      Name: "{{ name_prefix }}-route"
      Username: "{{ skylight_user }}"
      Info: "Username that provisioned this-> {{ skylight_user }}"
      Skylight: "This was provisioned through the skylight provisioner"
      Students: "{{ user_count }}"
  register: routetable
  until: routetable is not failed
  retries: 5

- name: Create ssh key pair for workshop {{ name_prefix }}
  ec2_key:
    name: "{{ skylight_user }}-{{ name_prefix }}-key"
    region: "{{ ec2_region }}"
  register: create_key

- name: Save the private key
  copy:
    content: "{{ create_key.key.private_key }}"
    dest: "{{ playbook_dir }}/workshops/{{ name_prefix }}/{{ skylight_user }}-{{ name_prefix }}-private.pem"
    mode: '0400'
  when: create_key.changed

################### Create Security Groups ###################

- include_tasks: resources/security_groups.yml
  loop: "{{ workshops[workshop_type].instances }}"
  loop_control:
    loop_var: app

################### Build Instances ###################

- include_tasks: resources/instances.yml
  loop: "{{ workshops[workshop_type].instances }}"
  loop_control:
    loop_var: app



# Add new dns entries to make the url pretty
#- block:
#
#  - name: "Docs | Create DNS entry for {{ name_prefix }}.{{ public_dns_zone }}"
#    route53:
#      state: present
#      zone: "{{ public_dns_zone }}"
#      record: "{{ name_prefix }}.{{ public_dns_zone }}"
#      type: A
#      ttl: 600
#      value: "{{ item.public_ip }}"
#      wait: yes
#    with_items: "{{ docs_instances.results | map(attribute='tagged_instances') | list }}"

#  - name: "Docs | Create DNS entry for docs.{{ item.tags.long_name }}"
#    route53:
#      state: present
#      zone: "{{ public_dns_zone }}"
#      record: "{{ item.tags.long_name }}"
#      type: A
#      ttl: 600
#      value: "{{ item.public_ip }}"
#      wait: yes
#    with_items: "{{ docs_instances.results | map(attribute='tagged_instances') | list }}"
#
#  - name: "GitLab | Create DNS entry for gitlab.{{ name_prefix }}.{{ public_dns_zone }}"
#    route53:
#      state: present
#      zone: "{{ public_dns_zone }}"
#      record: "{{ item.tags.long_name }}"
#      type: A
#      ttl: 600
#      value: "{{ item.public_ip }}"
#      wait: yes
#    with_items: "{{ gitlab_instances.results | map(attribute='tagged_instances') | list }}"
#
#  - name: "Workstation | Create DNS entries for student workstations"
#    route53:
#      state: present
#      zone: "{{ public_dns_zone }}"
#      record: "{{ item.tags.long_name }}"
#      type: A
#      ttl: 600
#      value: "{{ item.public_ip }}"
#      wait: yes
#    with_items: "{{ workstation_instances.results | map(attribute='tagged_instances') | list }}"

#  when: public_dns_zone is defined


################### Wait for Instances ###################

- include_tasks: resources/connection.yml
  with_dict: "{{ groups }}"
  loop_control:
    loop_var: group
  when:
    - group.key != 'ungrouped'
    - group.key != 'all'

################### Create Inventories ###################

- name: Generate instructor inventory
  template:
    src: instructor_inventory.j2
    dest: "{{ playbook_dir }}/workshops/{{ name_prefix }}/instructor_inventory.txt"

- name: Generate student inventories
  template:
    src: instances.txt.j2
    dest: "{{ playbook_dir }}/workshops/{{ name_prefix }}/{{ user_prefix }}{{ item }}-instances.txt"
  with_sequence: count="{{ user_count }}"
